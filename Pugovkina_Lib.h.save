//{===========================================================================
//! @brief	         Function library
//!
//! @author	        Tatiana Pugovkina, sity Omsk, 2021
//!
//! @mainpage  Функции:
//!				- @ref Titles ()
//!				- @ref Flowers ()
//!				- @ref DomDraw ()
//!             - @ref ElkaDraw ()
//!				- @ref CloudDraw ()
//!				- @ref SolnceDraw ()
//!				- @ref Fon_Rectangle ()
//!
//! <br>
//! <table border = 0>
//!  <tr>
//!    <td> @image html MEM.jpg </td>
//!    <td>
//!      @note <i>В мире нет ничего лучше и приятнее дружбы; исключить из жизни дружбу -
//!            всё равно, что лишить мир солнечного света</i> &nbsp;&nbsp; /Цицирон/
//!    </td>
//! </table>
//}===========================================================================

#include "TXLib.h"

void Fon_Rectangle (COLORREF nebo_Color, COLORREF zemlia_Color);

void Flowers (int flower_centerX, int flower_centerY, COLORREF flower_center_Color, COLORREF lepestok_Color);

void Titles (COLORREF fon_Color, COLORREF text_Color, char text_first_string[], char text_second_string[]);

void SolnceDraw (double x, double y, double sizeX, double sizeY, double eyes, double lenghLuch, double smile, COLORREF sunColor);

void CloudDraw (double x, double y, double sizeX, double sizeY, COLORREF cloudColor);

void DomDraw (int x, double y, double sizeX, double sizeY, double opendverX, double opendverY, COLORREF domColor, COLORREF krischaColor, COLORREF oknoColor, COLORREF trubaColor, COLORREF dverColor);

void ElkaDraw (double x, double y, double sizeX, double sizeY, double veterX, double veterY, COLORREF hvoiaColor, COLORREF stvolColor);

void KacheliDraw (int x, int y, double sizeX, double sizeY, double height_kacheli, COLORREF kacheliColor);

//{-------------------------------------------------------------------------------------------------------------
//! Разделяет экран на две части: 1я-часть - небо и 2я-часть - "земля"<br>
//! Разделение происходит по линии с координатами (0, 250, 1100, 250)
//!
//! @param nebo_Color    nebo_Color   - цвет неба
//! @param zemlia_Color  zemlia_Color - цвет "земли"
//!
//! @note                Цвет неба и "земли" зависит от погоды. При солнечной погоде - светлые тона,
//!						 при пасмурной - более тёмные тона
//!
//! @par				 Пример использования:
//! @code
//!						 Fon_Rectangle (RGB (151, 255, 255), TX_LIGHTGREEN);
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void Fon_Rectangle (COLORREF nebo_Color, COLORREF zemlia_Color)
	{
    txSetColor     (nebo_Color);
    txSetFillColor (nebo_Color);

    txRectangle (0, 0, 1100, 250);

    txSetColor     (zemlia_Color);
    txSetFillColor (zemlia_Color);

    txRectangle (0, 250, 1100, 800);
	}

//{-------------------------------------------------------------------------------------------------------------
//! Рисует цветок
//! <br>Рисование цветка: 5 лепестков и серединка
//!
//! <table border = 0>
//!  <tr>
//!   <td> @image html flower.jpg </td>
//!   <td>
//!     @param flower_centerX       flower_centerX      - координата X центра середины цветка </td>
//!     @param flower_centerY       flower_centerY      - координата Y центра середины цветка </td>
//!     @param flower_center_Color  flower_center_Color - цвет серединки цветка </td>
//!     @param lepestok_Color       lepestok_Color      - цвет лепестков цветка
//!   </td>
//!  </tr>
//! </table>
//!
//! @note                       Сначала рисуются лепестки, начиная с верхнего левого, затем рисуется серединка.<br>
//!                             Цвет лепестков выбирается случайным образом в диапазоне от светло-жёлтого до тёмно-жёлтого;<br>
//!								цвет серединки - в диапазоне от светло-голубого до тёмно-голубого
//!
//! @par			            Пример использования:
//! @code
//! 							Flowers (300, 260, RGB ( 60 + rand() % 80, 190 + rand() % 30, 200 + rand() %  40),
//! 											   RGB (210 + rand() % 11, 210 + rand() % 11,   0 + rand() % 166));
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void Flowers (int flower_centerX, int flower_centerY, COLORREF flower_center_Color, COLORREF lepestok_Color)
	{
    txSetColor     (lepestok_Color);
    txSetFillColor (lepestok_Color);

    txCircle (flower_centerX + 3, flower_centerY - 5, 5);
    txCircle (flower_centerX + 5, flower_centerY + 2, 5);
    txCircle (flower_centerX,     flower_centerY + 5, 5);
    txCircle (flower_centerX - 5, flower_centerY + 2, 5);
    txCircle (flower_centerX - 3, flower_centerY - 5, 5);

    txSetColor     (flower_center_Color);
    txSetFillColor (flower_center_Color);

    txCircle (flower_centerX, flower_centerY, 3);
	}

//{-------------------------------------------------------------------------------------------------------------
//! Выводит надпись на экран.  <br>
//! Надпись выводится снизу вверх, состоит из 2-х строчек. <br>
//! Текст типа Arial, размер шрифта - 100
//!
//! @param fon_Color             fon_Color            - задаёт цвет фона
//! @param text_Color            text_Color           - задаёт цвет текста
//! @param text_first_string[]   text_first_string[]  - выводит текст на первой строчке
//! @param text_second_string[]  text_second_string[] - выводит текст на второй строчке
//!
//! @note                        Текст выводится по центру относительно координаты Х = 550.<br>
//!                              Текст появляется снизу экрана, начиная с координаты по Y  <br>
//!                              для первой строки: Y = 700,<br>
//!                              для второй строки: Y = 800 <br>
//!                              и движется вверх по координате Y, до Y = 350 (первая строчка)
//!
//! @see                         <a href="http://storage.ded32.net.ru/Lib/TX/TXUpdate/Doc/HTML.ru/a00082.htm#ga09938df8859ae8b62638a3af76ee6735">txSetTextAlign ()</a>
//!
//! @par			             Пример использования:
//! @code
//!                              Titles (RGB (89, 184, 33), TX_WHITE, "Мультфильм", "Прогулка c подружками");
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void Titles (COLORREF fon_Color, COLORREF text_Color, char text_first_string[], char text_second_string[])
    {
    int t = 0;
    while (t <= 35)
        {
     	txClear ();
     	txSetColor (text_Color);
        txSetFillColor (fon_Color);

        txSetTextAlign (TA_CENTER);

		txSelectFont ("Arial", 100);
        txTextOut (550, 700 - t*10, text_first_string);
        txTextOut (550, 800 - t*10, text_second_string);

        txSetTextAlign ();

        txSleep (90);

        t++;
        }
    }

//{-------------------------------------------------------------------------------------------------------------
//! Рисует солнце с лучиками
//!
//! @param x          x         - Х-координата центра солнца
//! @param y          y         - Y-координата центра солнца
//! @param sizeX      sizeX     - изменение размера по координате Х
//! @param sizeY      sizeY     - изменение размера по координате Y
//! @param eyes       eyes      - изменение размера глаз
//! @param lenghLuch  lenghLuch - длина луча
//! @param smile      smile     - ширина улыбки
//! @param sunColor   sunColor  - цвет солнца
//!
//! @note                        Солнце рисуется с помощью эллипса. Радиус солнца - 30 пикселей. У солнца - 8 лучиков.<br>
//!                              Для рисования носа используется полигон.    <br>
//!                              Для рисования рта и глаз используется эллипс. <br>
//!                              При изменении значения аргумента smile (-3 до 1) можно сделать, чтобы солнце - "разговаривало"<br>
//!                              При изменении значения аргумента eyes (-2.5 до 2.5) можно сделать, чтобы солнце - "мигало"
//!
//! @see                         <a href="http://storage.ded32.net.ru/Lib/TX/TXUpdate/Doc/HTML.ru/a00082.htm#gaaf82e7c5a0fd06548f42c757f73d3dae">txEllipse ()</a> &nbsp;&nbsp;&nbsp;
//!                              <a href="http://storage.ded32.net.ru/Lib/TX/TXUpdate/Doc/HTML.ru/a00082.htm#gacbbb638439ad7ba88804178516019fb1">txPolygon ()</a>
//!
//! @par			             Пример использования:
//! @code
//!                              SolnceDraw (150, 100, 1, 1, -2, 1, 0.1, TX_YELLOW);
//! @endcode
//!
//! @section           Screenshots                  Скриншоты
//! <table border = 0>
//!  <tr> <td> @image html solnca.jpg </td> </tr>
//!
//! </table>
//}-------------------------------------------------------------------------------------------------------------

void SolnceDraw (double x, double y, double sizeX, double sizeY, double eyes, double lenghLuch, double smile, COLORREF sunColor)
    {
    txSetColor     (sunColor, 3);
    txSetFillColor (sunColor);

    txEllipse (x - 30*sizeX, y - 30*sizeY, x + 30*sizeX, y + 30*sizeY);

    txLine (x + 20*sizeX, y,            x + 60*sizeX * lenghLuch, y);
    txLine (x - 20*sizeX, y,            x - 60*sizeX * lenghLuch, y);
    txLine (x,            y + 20*sizeY, x,                        y + 60*sizeY * lenghLuch);
    txLine (x,            y - 20*sizeY, x,                        y - 60*sizeY * lenghLuch);
    txLine (x + 20*sizeX, y + 20*sizeY, x + 50*sizeX * lenghLuch, y + 50*sizeY * lenghLuch);
    txLine (x + 20*sizeX, y - 20*sizeY, x + 50*sizeX * lenghLuch, y - 50*sizeY * lenghLuch);
    txLine (x - 20*sizeX, y + 20*sizeY, x - 50*sizeX * lenghLuch, y + 50*sizeY * lenghLuch);
    txLine (x - 20*sizeX, y - 20*sizeY, x - 50*sizeX * lenghLuch, y - 50*sizeY * lenghLuch);

    txSetFillColor (RGB (119, 187, 255));
    txEllipse (x - 15*sizeX, y - 5*sizeY + eyes, x -  5*sizeX, y - 15*sizeY - eyes);
    txEllipse (x +  5*sizeX, y - 5*sizeY + eyes, x + 15*sizeX, y - 15*sizeY - eyes);

    txSetFillColor (TX_BROWN);
    POINT Nos[] = {{x - 8*sizeX, y - 1*sizeY},
                   {x + 8*sizeX, y - 1*sizeY},
                   {x + 1*sizeX, y + 8*sizeY}};
    txPolygon (Nos, 3);

    txSetFillColor (TX_RED);
    txEllipse (x - 22*sizeX - smile, y + 13*sizeY + smile, x + 18*sizeX - smile + 5, y + 20*sizeY - smile);
    }

//{-------------------------------------------------------------------------------------------------------------
//! Рисует облако
//!
//! <table border = 0>
//!  <tr>
//!   <td> @image html Cloud.jpg </td>
//!   <td>
//!    @param x           x          - Х-координата центра облака
//!    @param y           y          - Y-координата центра облака
//!    @param sizeX       sizeX      - изменение размера по координате Х
//!    @param sizeY       sizeY      - изменение размера по координате Y
//!    @param cloudColor  cloudColor - цвет облака
//!   </td>
//!  </tr>
//! </table>
//!
//! @note                        Облако рисуется с помощью 3-х эллипсов.
//!
//! @par			             Пример использования:
//! @code
//!                              CloudDraw (200, 230, 1, 1.2, RGB (160, 217, 250));
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void CloudDraw (double x, double y, double sizeX, double sizeY, COLORREF cloudColor)
    {
    txSetColor     (cloudColor);
    txSetFillColor (cloudColor);

	txEllipse (x - 60*sizeX, y - 20*sizeY, x - 20*sizeX, y + 20*sizeY);
    txEllipse (x - 30*sizeX, y - 30*sizeY, x + 30*sizeX, y + 30*sizeY);
    txEllipse (x + 20*sizeX, y - 20*sizeY, x + 65*sizeX, y + 30*sizeY);
    }

//{-------------------------------------------------------------------------------------------------------------
//! Рисует дом с треугольной крышей и трубой
//!
//! <table border = 0>
//!  <tr>
//!   <td> @image html Dom.jpg </td>
//!   <td>
//!     @param x             x            - Х-начальная координата рисования дома
//!     @param y             y            - Y-начальная координата рисования дома
//!     @param sizeX         sizeX        - изменение размера дома по координате Х
//!     @param sizeY         sizeY        - изменение размера дома по координате Y
//!     @param opendverX     opendverX    - координата X - "открытие" двери
//!     @param opendverY     opendverY    - координата Y - "открытие" двери
//!     @param domColor      domColor     - цвет дома
//!     @param krischaColor  krischaColor - цвет крыши
//!     @param oknoColor     oknoColor    - цвет окна
//!     @param trubaColor    trubaColor   - цвет трубы
//!     @param dverColor     dverColor    - цвет двери
//!   </td>
//!  </tr>
//! </table>
//!
//! @note   У Дома есть крыша, труба, в окне можно менять цвет, цвет дома тоже можно задавать. Двери, при значении
//!         параметра = 0, могут открываться. Планирую добавить дым из трубы.
//!
//! @par			             Пример использования:
//! @code
//!       DomDraw (100, 650, 1,3, 1,3, 1.5, 1.5, TX_BROWN, TX_BLUE, RGB (134, 134, 134), TX_DARKGRAY, TX_YELLOW);
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void DomDraw (int x, double y, double sizeX, double sizeY, double opendverX, double opendverY, COLORREF domColor, COLORREF krischaColor, COLORREF oknoColor, COLORREF trubaColor, COLORREF dverColor)
	{
	txSetColor (TX_BLACK, 3);

	txSetFillColor (domColor);
	txRectangle (x,            y,            x + 80*sizeX, y + 80*sizeY);
	txRectangle (x + 60*sizeX, y + 40*sizeY, x + 80*sizeX, y + 80*sizeY);

	txSetFillColor (krischaColor);
	txLine      (x + 40*sizeX, y - 40*sizeY, x - 10*sizeX, y + 10*sizeY);
	txLine      (x + 40*sizeX, y - 40*sizeY, x + 90*sizeX, y + 10*sizeY);
	txFloodFill (x + 40*sizeX, y - 10*sizeY);

	txSetFillColor (trubaColor);
	POINT Tryba[] = {{x + 60*sizeX, y - 20*sizeY},
	                 {x + 60*sizeX, y - 50*sizeY},
					 {x + 80*sizeX, y - 50*sizeY},
					 {x + 80*sizeX, y +  1*sizeY}};
	txPolygon (Tryba, 4);

	txSetFillColor (oknoColor);
	txRectangle (x + 20*sizeX, y + 20*sizeY, x + 50*sizeX, y + 40*sizeY);

	txSetFillColor (dverColor);
	POINT Dver[] = {{x + 60*sizeX,             y + 40*sizeY},
	                {x + 60*sizeX,             y + 80*sizeY},
					{x + 80*sizeX - opendverX, y + 80*sizeY + opendverY},
					{x + 80*sizeX - opendverX, y + 40*sizeY + opendverY}};
	txPolygon (Dver, 4);

	txSetFillColor (TX_BLACK);
	txEllipse (x + 70*sizeX - opendverX/2, y + 55*sizeY + opendverY/2,
			   x + 75*sizeX - opendverX/2, y + 65*sizeY + opendverY/2);
	}

//{-------------------------------------------------------------------------------------------------------------
//! Рисует ёлку
//!
//! <table border = 0>
//!  <tr>
//!   <td> @image html Elka.jpg </td>
//!   <td>
//!     @param x           x          - Х-начальная координата рисования ёлки
//!     @param y           y          - Y-начальная координата рисования ёлки
//!     @param sizeX       sizeX      - изменение размера ёлки по координате Х
//!     @param sizeY       sizeY      - изменение размера ёлки по координате Y
//!     @param veterX      veterX     - координата X - "раскачивания" ёлки
//!     @param veterY      veterY     - координата Y - "раскачивания" ёлки
//!     @param hvoiaColor  hvoiaColor - цвет хвои
//!     @param stvolColor  stvolColor - цвет ствола
//!   </td>
//!  </tr>
//! </table>
//!
//! @note    Ёлка рисуется 2-мя треугольниками. Ствол создаётся через прямоугольник. Есть параметры, отвечающие
//!          за эффект "качания вершины", но не придумала как он должен быть задан. Можно задавать цвет хвои и
//!          цвет ствола ёлки
//!
//! @par			  Пример использования:
//! @code
//!       ElkaDraw (250, 560, 1, 1, 0, 0, TX_GREEN, TX_BROWN);
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void ElkaDraw (double x, double y, double sizeX, double sizeY, double veterX, double veterY, COLORREF hvoiaColor, COLORREF stvolColor)
    {
    txSetColor (hvoiaColor, 3);
    txSetFillColor (hvoiaColor);

    POINT elka_verh[] = {{x + veterX,   y - veterY},
                         {x + 20*sizeX, y + 40*sizeY},
                         {x - 20*sizeX, y + 40*sizeY}};
    txPolygon (elka_verh, 3);

    POINT elka_niz[] = {{x,            y + 30*sizeY},
                        {x + 40*sizeX, y + 70*sizeY},
                        {x - 40*sizeX, y + 70*sizeY}};
    txPolygon (elka_niz, 3);

    txSetColor (stvolColor, 3);
    txSetFillColor (stvolColor);

    txRectangle (x - 10*sizeX, y + 73*sizeY, x + 10*sizeX, y + 95*sizeY);
    }

//{-------------------------------------------------------------------------------------------------------------
//! Рисует качели
//!
//! <table border = 0>
//!  <tr>
//!   <td> @image html Kac.jpg </td>
//!   <td>
//!     @param x               x              - Х-начальная координата рисования качель
//!     @param y               y              - Y-начальная координата рисования качель
//!     @param sizeX           sizeX          - изменение размера качель по координате Х
//!     @param sizeY           sizeY          - изменение размера качель по координате Y
//!     @param height_kacheli  height_kacheli - параметр, влияющий на "движение" качель
//!                                             ("0" - качели не двигаются, "1" - начинают качаться)
//!     @param kacheliColor    kacheliColor   - цвет качели
//!   </td>
//!  </tr>
//! </table>
//!
//! @note
//!
//! @par			  Пример использования:
//! @code
//!       KacheliDraw (400, 400, 1, 1, 0, TX_BROWN);
//! @endcode
//}-------------------------------------------------------------------------------------------------------------

void KacheliDraw (int x, int y, double sizeX, double sizeY, double height_kacheli, COLORREF kacheliColor)
    {
    txSetColor (kacheliColor, 3);
    txSetFillColor (kacheliColor);

    txLine (x + 40*sizeX, y + 20*sizeY, x - 40*sizeX, y + 20*sizeY);
    txLine (x,            y,            x + 40*sizeX, y + 20*sizeY);
    txLine (x - 40*sizeX, y + 20*sizeY, x,            y);

    txFloodFill (x, y + 10*sizeY);

    if (height_kacheli == 1)
        {
        txLine (x - 100*sizeX, y + 20*sizeY, x + 100*sizeX, y - 20*sizeY);
        txLine (x + 100*sizeX, y - 20*sizeY, x +  95*sizeX, y - 35*sizeY);
        txLine (x - 100*sizeX, y + 20*sizeY, x - 107*sizeX, y);
        }
    else
        {
        txLine (x - 100*sizeX, y - 20*sizeY, x + 100*sizeX, y+20);
        txLine (x + 100*sizeX, y + 17*sizeY, x + 105*sizeX, y);
        txLine (x - 100*sizeX, y - 20*sizeY, x - 95*sizeX, y-43);
        }
    }
